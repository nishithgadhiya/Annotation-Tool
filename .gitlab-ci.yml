stages:
  - build
  - test
  - deploy

# Build and deploy our frontend to firebase hosting when it gets merged to the develop branch.
build-and-deploy-frontend-dev:
  stage: deploy
  environment:
    name: test
    url: https://datanotion-test.web.app
  image: node:18.0.0
  only:
    - develop
  before_script:
    - npm i -g firebase-tools
  script:
    - cd frontend
    - echo "export const BASEURL = \"$BACKEND_TEST_URL\";" >> src/components/Url.js
    - npm install --legacy-peer-deps
    - npm run build
    - ./node_modules/.bin/firebase deploy --only hosting:test --token "$FIREBASE_TOKEN"

# Build and deploy our frontend to firebase hosting when it gets merged to the release branch.
build-and-deploy-frontend-prod:
  stage: deploy
  environment:
    name: prod
    url: https://datanotion-prod.web.app
  image: node:18.0.0
  only:
    - /^release.*$/
  before_script:
    - npm i -g firebase-tools
  script:
    - cd frontend
    - echo "export const BASEURL = \"$BACKEND_PROD_URL\";" >> src/components/Url.js
    - npm install --legacy-peer-deps
    - npm run build
    - ./node_modules/.bin/firebase deploy --only hosting:prod --token "$FIREBASE_TOKEN"

# Build the backend and test it EVERYTIME there is a pull request created for the develop branch. mvn packagE will build
# as well as test the backend.
build-and-run-backend-tests:
  image: maven:3.6.3-openjdk-11
  stage: test
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
  script:
    - cd backend
    - export DB_HOST=$DB_HOST_DEV
    - export DB_PORT=$DB_PORT_DEV
    - export DB_DATABASE=$DB_DATABASE_DEV
    - export DB_USERNAME=$DB_USERNAME_DEV
    - export DB_PASSWORD=$DB_PASSWORD_DEV
    - mvn package

# Build the frontend and test it EVERYTIME there is a pull request created for the develop branch.
build-and-test-frontend:
  image: node:18.0.0
  stage: test
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
  script:
    - cd frontend
    - echo "export const BASEURL = \"$BACKEND_TEST_URL\";" >> src/components/Url.js
    - npm install --legacy-peer-deps
    - npm run build

# Builds and deploys the backend to the test server on heroku when it gets merged to the develop branch.
deploy-backend-to-dev:
  stage: deploy
  environment:
    name: test
  only:
    - develop
  before_script:
    - apt-get update
    - apt-get install git -y
  script:
    - echo "Deploying to dev"
    - git remote remove heroku || true
    - git remote add heroku https://heroku:$HEROKU_ACCOUNT_KEY@git.heroku.com/$APP_NAME_DEV.git || true
    - git remote -v
    - git config pull.rebase false
    - git config --global user.email ""
    - git config --global user.name ""
    - git pull origin develop:develop
    - git status
    - git checkout develop
    - git push heroku `git subtree split --prefix backend develop`:master --force

deploy-backend-to-prod:
  stage: deploy
  environment:
    name: prod
  only:
    - /^release.*$/
  before_script:
    - apt-get update
    - apt-get install git -y
  script:
    - echo "Deploying to prod"
    - git remote remove heroku || true
    - git remote add heroku https://heroku:$HEROKU_ACCOUNT_KEY@git.heroku.com/$APP_NAME_PROD.git || true
    - git remote -v
    - git config pull.rebase false
    - git config --global user.email ""
    - git config --global user.name ""
    - git pull origin $CI_MERGE_REQUEST_TARGET_BRANCH_NAME:deploy-prod
    - git status
    - git checkout $CI_MERGE_REQUEST_TARGET_BRANCH_NAME
    - git push heroku `git subtree split --prefix backend deploy-prod`:master --force
